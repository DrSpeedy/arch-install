#!/bin/bash
# Maintainer: Brian Wilson <doc@wiltech.org>
# Licence: MIT

#set -xe

# Path to the directory this script is running
# from. This value should always be the base directory of
# the project.
export script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# setup_keymap() {}

# setup_network() {}

setup_hwclock() {
    _info_msg "Setting hardware clock time to UTC..."
    hwclock --systohc --utc
    _info_msg "Hardware time: $(hwclock --show)"
}

setup_target_disk() {
    local _dev_list=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
    export install_dev=$(dialog --stdout --menu "Select installtion disk" 0 0 0 ${_dev_list}) || exit 1
    clear

    local _efs_script=$(dialog --stdout --title "Please choose a file" --fselect ${tool_dir}/fs/scripts/ 14 48)

    local _dialog_msg="WARNING: You are about to wipe all data on ${install_dev}! \
        This operation is non-reversable! Are you sure you'd like to continue?"
    dialog --title "WARNING!" --yesno "${_dialog_msg}" 14 48

    case $? in
        0)
            _info_msg "Provisioning ${install_dev}..."
            eval "${_efs_script} -w ${work_dir} -d ${install_dev} -s"
            ;;
        *)
            _err_msg -1 "Installation aborted!"
            ;;
    esac
}

setup_rootfs() {
    _info_msg "Installing system to ${mount_dir}..."

    local _pkgs=$(grep -v -h ^# ${script_dir}/../pkglist.{any,${arch}})
    _pacman "${_pkgs}"

    _info_msg "Syncing provisioning package..."
    _rsync ${script_dir}/../airootfs/* ${mount_dir}
    if [[ -f "${build_dir}/${build_custom}" ]]; then
        _info_msg "Running ${build_custom} on target system!"
        _chroot "${build_custom}"
        rm -f "${mount_dir}/${build_custom}"
    fi
}

setup_boot() {

    local _eb_script=$(dialog --stdout --title "Please choose a file" --fselect ${tool_dir}/boot/grub/scripts/ 14 48)

    local _dialog_msg="WARNING: You are about to install GRUB EFI on ${install_dev}! \
        Are you sure you'd like to continue?"
    dialog --title "WARNING!" --yesno "${_dialog_msg}" 14 48

    case $? in
        0)
            _info_msg "Provisioning ${install_dev}..."
            eval "${_eb_script}"
            ;;
        *)
            _err_msg -1 "Installation aborted!"
            ;;
    esac
}
# clean_up() {}
# install() {}
# makepkg() {}

# Initialize pacman config
pacman_init() {
    local _cache_dirs
    _cache_dirs=($(pacman -v 2>&1 | grep '^Cache Dirs:' | sed 's/Cache Dirs:\s*//g'))
    sed -r "s|^#?\\s*CacheDir.+|CacheDir = $(echo -n ${_cache_dirs[@]})|g" ${pacman_conf} > ${work_dir}/pacman.conf
}

init() {
    echo "Initializing build scripts..."

    export arch=$(uname -m)

    # Load and export variables from config file
    local _config_raw=$(sed '/^[[:blank:]]*#/d;s/#.*//;/^$/d' ${script_dir}/config)

    while read -r _cvar; do
        export "$(eval echo $_cvar)"
    done <<< "$_config_raw"

    # Debug presets
    if [[ ${debug} ]]; then
        # Error handling
        set -uo pipefail
        trap 's=$?; _err_msg $s "$0: Line \"$LINENO\": $BASH_COMMAND"' ERR

        # Force verboseness
        export verbose='y'

        # Version
        export version=dev-$(date +'%Y-%m-%d')-$(git rev-parse --short HEAD)
 
        # Setup logging
        mkdir -p ${log_dir}
        echo -e "=========== DEBUG INFO ===========" | tee -a ${log_file}
        echo -e "Version: ${version}" | tee -a ${log_file}
        echo -e "Date: $(date)" | tee -a ${log_file}
        echo
        echo -e "CONFIG:" | tee -a ${log_file}
        while read -r _cvar; do
            echo -e "\t$(eval echo $_cvar)" | sed -e 's/=/: /g' | tee -a ${log_file}
        done <<< "$_config_raw"
        echo -e "==================================" | tee -a ${log_file}
    fi

    # Basic sanity check
    mkdir -p ${work_dir} ${build_dir} ${mount_dir} ${tool_dir}
    
    # Source some helpful utilities
    source "${tool_dir}/share/utilrc"

    _info_msg "Initialized."
}

usage() { 
    echo "Usage: $0 [-d <device node>] [-w <work directory>] [-s]" 1>&2
    exit 1; 
}

if [[ ${EUID} -ne 0 ]]; then
    echo "This script must be run as root!"
    usage
fi

while getopts ":w:m:vdch" o; do
    case "${o}" in
        w)
            export work_dir=${OPTARG}
            ;;
        m)
            export mount_dir=${OPTARG}
            ;;
        d)
            export debug=true
            ;;
        v)
            export verbose=true
            ;;
        c)
            export cleanup=true
            ;;
        h|*)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [[ ${EUID} -ne 0 ]]; then
    _err_msg "This script must be run as the root user."
fi

init
pacman_init
setup_target_disk
setup_rootfs
# setup_boot

